package main.java.com.saranya.arrays;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * Given an array of integers nums and an integer k, return the number of unique
 * k-diff pairs in the array.
 * 
 * A k-diff pair is an integer pair (nums[i], nums[j]), where the following are
 * true:
 * 
 * 0 <= i, j < nums.length i != j |nums[i] - nums[j]| == k Notice that |val|
 * denotes the absolute value of val.
 * 
 * Example 1:
 * 
 * Input: nums = [3,1,4,1,5], k = 2 Output: 2 Explanation: There are two 2-diff
 * pairs in the array, (1, 3) and (3, 5). Although we have two 1s in the input,
 * we should only return the number of unique pairs.
 * 
 */
public class KdiffPairsInArray {

	public static void main(String[] args) {
		int[] nums = {3,1,4,1,5};
		int k = 2;
		System.out.println(findKDiffPairs(nums,k));
		System.out.println("Java 8 "+java8Solution(nums, k));
	}

	private static int java8Solution(int[] nums, int k) {
		final Map<Object, Long> map = Arrays.stream(nums).boxed().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
		return map.entrySet().stream()
		        .mapToInt(entry -> { 	            
		                return map.containsKey(k + ((Integer) entry.getKey()).intValue()) ? 1 : 0;
		            
		        })
		        .sum();
	}

	private static String findKDiffPairs(int[] nums, int k) {
		HashMap<Integer, Integer> map = new HashMap<>();
		for(int n:nums) {
			map.put(n, map.getOrDefault(n, 0)+1);
		}
		int count=0;
		 for (Map.Entry<Integer, Integer> item : map.entrySet()) {
	            if(k==0){
	                if(item.getValue()>=2){
	                    count++;
	                }
	            } else {
	            if(map.containsKey(k+item.getKey())){
	                count++;
	            }
	            }
	}
		 return String.valueOf(count);
	}
}
